import aiomysql

import json
import aiohttp

import functools

import datetime

cache = {}

filials = {
            'Кировский (г. Томск, пр-т Фрунзе, д.103д)': '533',
            'Ленинский (г. Томск, пер. Дербышевский, д. 26 Б)': '461',
            'Октябрьский (г. Томск, ул. Пушкина, д. 63, стр. 5)': '641',
            'Советский (г. Томск, ул. Тверская, д. 74)': '689',
            'Александровский (Томская область, с.Александровское,ул. Лебедева, д. 30)': '425',
            'Дом предпринимателя (Томская область, Московский тракт, д12)': '371',
            'ЗАТО Северск (Томская область, ЗАТО Северск, пр. Коммунистический, д. 103)': '431',
            'Зырянский (Томская область, Зырянский район, Зырянское село, Советская улица, д.46А)': '665',
            'Кожевниковский (Томская область, Кожевниковский район,с. Кожевниково, ул. Парковая, д. 1, стр. 3)': '377',
            'ПАО «Банк Уралсиб» (г. Томск, пр. Фрунзе, д.11а)': '557',
            'ПАО «Томскпромстройбанк» (г. Томск, пр. Фрунзе, д.90)': '389',
            'ПАО Банк «Левобережный» (г. Томск, пер. Совпартшкольный, д.13)': '449',
            'ПАО Банк «ФК Открытие» (г. Томск, ул. Набережная реки Ушайки, д16)': '677',
            'п.Большая Саровка (Томская область, Колпашевский район,п. Большая Саровка, ул. Советская, д. 35/2)': '605',
            'п.Зональная (Томская область, Томский район,п. Зональная Станция, ул. Солнечная, д. 23)': '443',
            'Первомайский (Томская область, Первомайский район,с. Первомайское, ул. Степная, д. 26)': '719',
            'с.Анастасьевка (Томская область, Шегарский район,с. Анастасьевка, пер. Школьный, д. 2)': '659',
            'с.Зоркальцево (Томская область, Томский район,с. Зоркальцево, ул. Совхозная, д. 14)': '479',
            'с.Малиновка(Кожевниковский) (Томская область, Кожевниковский район,с. Малиновка, ул.Школьная, д. 13)': '713',
            'с.Межениновка (Томская область, Томский район,с. Межениновка, ул. Первомайская, д. 23)': '731',
            'с.Моряковский (Томская область, Томский район сельское поселение Моряковское, с.Моряковский Затон, ул. Советская, д. 27)': '551',
            'с.Новопокровка (Томская область, Кожевниковский район,с. Новопокровка, ул. Садовая, д. 2а)': '407',
            'с.Новорождественское (Томская область, Томский район,с. Новорождественское, ул. Советская, д. 62)': '725',
            'с.Песочнодубровка (Томская область, Кожевниковский район,с. Песочнодубровка, ул. Молодежная, д. 37)': '467',
            'с.Турунтаево (Томская область, Томский Район, Турунтаево Село, Новая Улица, д.2а)': '623',
            'Стрежевой (Томская область, г. Стрежевой, 4 мкрн., д. 405)': '347',
            'Асиновский (Томская область, г. Асино, ул. Им. Ленина, д. 70)': '545',
            'Верхнекетский (Томская область, р.п. Белый Яр, ул. Таежная, д. 9)': '635',
            'г.Кедровый (Томская область, г. Кедровый, 1 мкр., д.39/1)': '455',
            'д.Воронино (Томская область, Томский район,д. Воронино, ул. Центральная, д. 74)': '395',
            'д.Кисловка (Томская область, Томский район,д. Кисловка, ул. Мира, д. 12)': '491',
            'Дом предпринимателя (Томская область, Московский тракт, д12)': '371',
            'Колпашевский (Томская область, Колпашевский район, г. Колпашево, ул. Л.Толстого, д. 14)': '611',
            'Кривошеинский (Томская область, Кривошеинский район, с. Кривошеино, ул. Ленина, д. 29)': '593',
            'Молчановский (Томская область, Молчановский район, с. Молчаново, ул. Димитрова, д. 15)': '503',
            'п.Зональная (Томская область, Томский район,п. Зональная Станция, ул. Солнечная, д. 23)': '443',
            'п.Мирный (Томская область, Томский район,п. Мирный, ул. Трудовая, д. 2)': '401',
            'п.Победа (Томская область, Шегарский район,п. Победа, ул.Ленина, д. 68)': '629',
            'п.Рассвет (Томская область, Томский район,п.Рассвет, д. 11)': '539',
            'Парабель (Томская обл, Парабельский р-н, село Парабель, ул Советская, д 102а)': '2894026',
            'Первомайский (Томская область, Первомайский район,с. Первомайское, ул. Степная, д. 26)': '719',
            'с.Анастасьевка (Томская область, Шегарский район,с. Анастасьевка, пер. Школьный, д. 2)': '659',
            'с.Баткат (Томская область, Шегарский район,с. Баткат, пер.Кооперативный, д. 1)': '515',
            'с.Богашево (Томская область, Томский район,с. Богашево, ул. Новостройка, д. 20 а; ул.Советская, д. 6)': '575',
            'с.Вершинино (Томская область, Томский район,с. Вершинино, пер.Новый, д. 2)': '437',
            'с.Володино (Томская область, Кривошеинский район,с. Володино, ул. Советская, 31)': '647',
            'с.Вороново (Томская область, Кожевниковский район,с. Вороново, ул.Уткина, д. 17)': '707',
            'с.Зоркальцево (Томская область, Томский район,с. Зоркальцево, ул. Совхозная, д. 14)': '479',
            'с.Итатка (Томская область, Томский район,с. Итатка, ул. Гагарина, д. 1)': '383',
            'с.Калтай (Томская область, Томский район,с. Калтай, ул. Ленина, д. 72)': '329',
            'с.Корнилово (Томская область, Томский район,с. Корнилово, ул. Гагарина, д. 29а)': '419',
            'с.Красный Яр (Томская область, Кривошеинский район,с. Красный Яр, ул. Советская, д. 60)': '563',
            'с.Малиновка(Кожевниковский) (Томская область, Кожевниковский район,с. Малиновка, ул.Школьная, д. 13)': '713',
            'с.Малиновка (Томская область, Томский район,с. Малиновка, ул. Чулымская, д. 30)': '599',
            'с.Межениновка (Томская область, Томский район,с. Межениновка, ул. Первомайская, д. 23)': '731',
            'с.Могочино (Томская область, Молчановский район,с. Могочино, ул. Заводская, д. 3)': '335',
            'с.Монастырка (Томская область, Шегарский район,с. Монастырка, ул.Советская, д. 51 а)': '617',
            'с.Моряковский (Томская область, Томский район сельское поселение Моряковское, с.Моряковский Затон, ул. Советская, д. 27)': '551',
            'с.Нарга (Томская область, Молчановский район,с. Нарга, ул. К. Маркса, д. 41)': '497',
            'с.Новопокровка (Томская область, Кожевниковский район,с. Новопокровка, ул. Садовая, д. 2а)': '407',
            'с.Новорождественское (Томская область, Томский район,с. Новорождественское, ул. Советская, д. 62)': '725',
            'с.Новоселово (Томская область, Колпашевский район,с. Новоселово, ул. Центральная, д. 11/1)': '413',
            'с.Октябрьское (Томская обл., Томский р-н., с. Октябрьское, ул. Заводская, д. 7/2 (Библиотека))': '527',
            'с.Песочнодубровка (Томская область, Кожевниковский район,с. Песочнодубровка, ул. Молодежная, д. 37)': '467',
            'с.Рыбалово (Томская область, Томский район,с. Рыбалово, ул. Коммунистическая, д. 9)': '521',
            'с.Старая Ювала (Томская область, Кожевниковский район,с. Старая Ювала, ул. Ульяновская,д. д. 3а)': '653',
            'с.Трубачево (Томская область, Шегарский район,с. Трубачево, ул.Центральная, д. 7)': '671',
            'с.Тунгусово (Томская область, Молчановский район,с. Тунгусово, ул. У. Кнакиса, д. 5)': '473',
            'с.Турунтаево (Томская область, Томский Район, Турунтаево Село, Новая Улица, д.2а)': '623',
            'с.Уртам (Томская область, Кожевниковский район,с. Уртам, ул. Фрунзе, д. 33)': '569',
            'с.Чажемто (Томская область,Колпашевский район,с. Чажемто, ул. Ленина, д. 24)': '485',
            'с.Чилино (Томская область, Кожевниковский район,с. Чилино, ул. Кустарная, д. 1)': '359',
            'Стрежевой (Томская область, г. Стрежевой, 4 мкрн., д. 405)': '347',
            'АО «Газпромбанк» (Томская область, Томск Город, 1905 года Переулок, д7)': '342595',
            'Советский (г. Томск, ул. Тверская, д. 74)': '689',
            'ПАО «Промсвязьбанк» (г. Томск, пр. Ленина, д.82Б)': '683',
            'ПАО Банк «Левобережный» (г. Томск, пер. Совпартшкольный, д.13)': '449',
            'ПАО Банк «ФК Открытие» (г. Томск, ул. Набережная реки Ушайки, д16)': '677',
            'с. Сергеево (Томская область, Первомайский Район, Сергеево Село, Школьная Улица)': '432256',
            'Тегульдетский (Томская область, Тегульдетский район, с. Тегульдет, ул. Ленина, д. 97)': '365',
            'Чаинский (Томская область, Чаинский район, с. Подгорное, ул. Лесная, д. 36)': '695',
            'Шегарский (Томская область, Шегарский район, с. Мельниково, ул. Московская, д. 17)': '701',
            'ОЭЗ ТВТ (Томская область, Томск город, Развития проспект, д3)': '509'
        }

# MFC_MAPPING = {
#             '533': 'Кировский',
#             '461': 'Ленинский',
#             '641': 'Октябрьский',
#             '689': 'Советский',
#             '425': 'Александровский',
#             '371': 'Дом предпринимателя',
#             '431': 'ЗАТО Северск',
#             '665': 'Зырянский',
#             '377': 'Кожевниковский',
#             '557': 'ПАО «Банк Уралсиб»',
#             '389': 'ПАО «Томскпромстройбанк»',
#             '449': 'ПАО Банк «Левобережный»',
#             '677': 'ПАО Банк «ФК Открытие»',
#             '605': 'п.Большая Саровка',
#             '443': 'п.Зональная',
#             '719': 'Первомайский',
#             '659': 'с.Анастасьевка',
#             '479': 'с.Зоркальцево',
#             '713': 'с.Малиновка(Кожевниковский)',
#             '731': 'с.Межениновка',
#             '551': 'с.Моряковский',
#             '407': 'с.Новопокровка',
#             '725': 'с.Новорождественское',
#             '467': 'с.Песочнодубровка',
#             '623': 'с.Турунтаево',
#             '347': 'Стрежевой',
#             '545': 'Асиновский',
#             '635': 'Верхнекетский',
#             '455': 'г.Кедровый',
#             '395': 'д.Воронино',
#             '491': 'д.Кисловка',
#             '371': 'Дом предпринимателя',
#             '611': 'Колпашевский',
#             '593': 'Кривошеинский',
#             '503': 'Молчановский',
#             '443': 'п.Зональная',
#             '401': 'п.Мирный',
#             '629': 'п.Победа',
#             '539': 'п.Рассвет',
#             '2894026': 'Парабель',
#             '719': 'Первомайский',
#             '659': 'с.Анастасьевка',
#             '515': 'с.Баткат',
#             '575': 'с.Богашево',
#             '437': 'с.Вершинино',
#             '647': 'с.Володино',
#             '707': 'с.Вороново',
#             '479': 'с.Зоркальцево',
#             '383': 'с.Итатка',
#             '329': 'с.Калтай',
#             '419': 'с.Корнилово',
#             '563': 'с.Красный Яр',
#             '713': 'с.Малиновка(Кожевниковский)',
#             '599': 'с.Малиновка',
#             '731': 'с.Межениновка',
#             '335': 'с.Могочино',
#             '617': 'с.Монастырка',
#             '551': 'с.Моряковский',
#             '497': 'с.Нарга',
#             '407': 'с.Новопокровка',
#             '725': 'с.Новорождественское',
#             '413': 'с.Новоселово',
#             '527': 'с.Октябрьское',
#             '467': 'с.Песочнодубровка',
#             '521': 'с.Рыбалово',
#             '653': 'с.Старая Ювала',
#             '671': 'с.Трубачево',
#             '473': 'с.Тунгусово',
#             '623': 'с.Турунтаево',
#             '569': 'с.Уртам',
#             '485': 'с.Чажемто',
#             '359': 'с.Чилино',
#             '347': 'Стрежевой',
#             '342595': 'АО «Газпромбанк»',
#             '689': 'Советский',
#             '683': 'ПАО «Промсвязьбанк»',
#             '449': 'ПАО Банк «Левобережный»',
#             '677': 'ПАО Банк «ФК Открытие»',
#             '432256': 'с. Сергеево',
#             '365': 'Тегульдетский',
#             '695': 'Чаинский',
#             '701': 'Шегарский',
#             '509': 'ОЭЗ ТВТ'
#         }

filials_1 = {
            'Кировский': '533',
            'Ленинский': '461',
            'Октябрьский': '641',
            'Советский': '689',
            'Александровский': '425',
            'Дом предпринимателя': '371',
            'ЗАТО Северск': '431',
            'Зырянский': '665',
            'Кожевниковский': '377',
            'ПАО «Банк Уралсиб»': '557',
            'ПАО «Томскпромстройбанк»': '389',
            'ПАО Банк «Левобережный»': '449',
            'ПАО Банк «ФК Открытие»': '677',
            'п.Большая Саровка': '605',
            'п.Зональная': '443',
            'Первомайский': '719',
            'с.Анастасьевка': '659',
            'с.Зоркальцево': '479',
            'с.Малиновка(Кожевниковский)': '713',
            'с.Межениновка': '731',
            'с.Моряковский': '551',
            'с.Новопокровка': '407',
            'с.Новорождественское': '725',
            'с.Песочнодубровка': '467',
            'с.Турунтаево': '623',
            'Стрежевой': '347',
            'Асиновский': '545',
            'Верхнекетский': '635',
            'г.Кедровый': '455',
            'д.Воронино': '395',
            'д.Кисловка': '491',
            'Дом предпринимателя': '371',
            'Колпашевский': '611',
            'Кривошеинский': '593',
            'Молчановский': '503',
            'п.Зональная': '443',
            'п.Мирный': '401',
            'п.Победа': '629',
            'п.Рассвет': '539',
            'Парабель': '2894026',
            'Первомайский': '719',
            'с.Анастасьевка': '659',
            'с.Баткат': '515',
            'с.Богашево': '575',
            'с.Вершинино': '437',
            'с.Володино': '647',
            'с.Вороново': '707',
            'с.Зоркальцево': '479',
            'с.Итатка': '383',
            'с.Калтай': '329',
            'с.Корнилово': '419',
            'с.Красный Яр': '563',
            'с.Малиновка(Кожевниковский)': '713',
            'с.Малиновка': '599',
            'с.Межениновка': '731',
            'с.Могочино': '335',
            'с.Монастырка': '617',
            'с.Моряковский': '551',
            'с.Нарга': '497',
            'с.Новопокровка': '407',
            'с.Новорождественское': '725',
            'с.Новоселово': '413',
            'с.Октябрьское': '527',
            'с.Песочнодубровка': '467',
            'с.Рыбалово': '521',
            'с.Старая Ювала': '653',
            'с.Трубачево': '671',
            'с.Тунгусово': '473',
            'с.Турунтаево': '623',
            'с.Уртам': '569',
            'с.Чажемто': '485',
            'с.Чилино': '359',
            'Стрежевой': '347',
            'АО «Газпромбанк»': '342595',
            'Советский': '689',
            'ПАО «Промсвязьбанк»': '683',
            'ПАО Банк «Левобережный»': '449',
            'ПАО Банк «ФК Открытие»': '677',
            'с. Сергеево': '432256',
            'Тегульдетский': '365',
            'Чаинский': '695',
            'Шегарский': '701',
            'ОЭЗ ТВТ': '509'
        }

services = {
            'Загранпаспорт (10 лет)': '3a276fae-0959-44a5-a6eb-f87a0b5650b4',
            'ИНН, СНИЛС, ОМС': '976eb69d-83cb-42b9-893a-926e11956393',
            'Получение готовых документов': '5b0b693c-231e-4f40-8d64-c275c7d9217c',
            'Регистрация и кадастровый учет недвижимости': '8f5e514e-dcce-41cf-8b56-38db6af10056',
            'Предоставление сведений из ЕГРН': '77a009c9-f183-4ac6-9275-ae9ff7b7d4b9',
            'Прекращение, приостановка, приобщение документов по ранее принятому делу (недвижимость)': '14ea190f-e597-4c68-a77a-a697d826101b',
            'Опека (дача разрешения на сделки с недвижимостью для несовершеннолетних)': '99def219-6ee8-47e4-9508-b77b2042a332',
            'Паспорт, прописка': '78402a5a-321b-4213-a081-a32a29c0317d',
            'Субсидии, льготы, компенсации, пенсии': 'c155b875-cd2c-4dc9-95a4-bd68ff0d4f1b',
            'Справки УМВД и Пенсионного фонда (справки о несудимости, выписки ИЛС, справки о размере пенсии и другие)': '93e9047a-b55f-4d43-b10d-554f5bd3c080',
            'Распоряжение средствами материнского капитала': 'dfa9a351-dc67-42da-b33c-e1fa5da95b90',
            'Детские пособия, путёвки': '97d144a1-14ab-4381-ad05-5575c54e677d',
            'Портал Госуслуги.ру': 'f94fd42b-611b-460a-8270-059526b40d35',
            'Услуги для предпринимателей': '97ddcd3f-227b-4450-a62d-c7da82084020',
            'Составление налоговой декларации': '0666b35c-0383-441e-a158-cc9bcafffef7',
            'Составление договоров': '36340cfb-7864-4ced-81df-9845bd73cfe2',
            '"Водительское удостоверение': '9fcfcb68-befb-42e5-ae3c-8b05f3dfe3c2',
            'Банкротство физических лиц': 'fb6348b0-6b0c-4aa3-9deb-7385894beb39',
            'Консультация специалиста Роспотребнадзора': '52cc58f4-2f75-46b2-8065-abe1c6ed6889',
            'Онлайн консультация специалиста Росреестра': '81914e42-5ce6-477a-a49c-52299d37f8ca',
            'Ежемесячная денежная выплата на ребенка в возрасте от 8 до 17 лет': 'c205f225-d3b0-4183-a424-d215317632ab',
            'Выдача сертификатов на газификацию жилого помещения': 'ae063235-ef12-4166-922b-78e307060c5d',
            'Онлайн консультация с нотариусом': '4b7b705a-8b12-4f07-b26f-d573e6f096c2'
        }

class base:
    def __init__(self, user_id = None, filial = None, fio = None, tel = None, usluga = None, time = None, date = None, fields = None, \
        field_1 = None, field_2 = None, field_3 = None, field_4 = None, field_5 = None, field_6 = None, field_7 = None):
        self.user_id = user_id
        self.filial = filial
        self.fio = fio
        if tel is not None:
            self.tel = tel.replace('+7', '8')
        else:
            self.tel = tel
        self.usluga = usluga
        self.time = time
        self.date = date
        self.fields = fields

        self.field_1 = field_1
        self.field_2 = field_2
        self.field_3 = field_3
        self.field_4 = field_4
        self.field_5 = field_5
        self.field_6 = field_6
        self.field_7 = field_7

    async def readiness_status(*args):
        try:
            status_url = "https://aismfc.mfc.tomsk.ru/cpgu/action/api/getOrderStatusInfo?token=78171bdb-07e0-42e8-935c-f8ba5dc174d3&code={}"
            # dict_status_url = "https://aismfc.mfc.tomsk.ru/cpgu/action/api/getStatusDictionary"
            dict_status_operator = {
                "CLOSED": "переключить на оператора",
            }
            dict_status_new = {
                "DEFAULT": "Не определен",
                "IN_WORK": "Документы в обработке в МФЦ",
                "ARCHIVE": "Документы переданы в архив ведомства",
                "RETURN_UNCLAIMED_RESULT": "Документы находятся на выдаче в МФЦ",
                "PROCESSING": "Документы в обработке в МФЦ",
                "REVISING": "Документы в обработке в МФЦ",
                "WAITING_MISSING_DOCS": "Документы в обработке в МФЦ",
                "PROCESSED": "Документы в обработке в МФЦ",
                "DOCS_PASSED_TO_PROCESSOR": "Документы в обработке в МФЦ",
                "DOCS_PASSED_TO_OPERATOR": "Документы в обработке в МФЦ",
                "WAITING_FOR_DOCUMENTS": "Документы в обработке в МФЦ",
                "RECEIVED_BY_DISTRIBUTE_CENTER": "Документы в обработке в ведомстве",
                "SENT_TO_MFC_BY_DISTRIBUTE_CENTER": "Документы в обработке в ведомстве",
                "WAITING_RESPONSE_FROM_DEPARTMENT": "Документы в обработке в ведомстве",
                "READY_TO_SEND_REQUEST": "Документы в обработке в ведомстве",
                "REJECTED": "Отказано в приеме ",
                "SEND_TO_VIS": "Документы в обработке в ведомстве",
                "SENT_TO_VIS": "Документы в обработке в ведомстве",
                "SENT_BY_COURIER": "Документы в обработке в ведомстве",
                "ISSUE": "Документы находятся на выдаче в МФЦ",
                "CALL_CENTER": "Документы находятся на выдаче в МФЦ",
                "DELIVERY": "Документы находятся на выдаче в МФЦ",
                "DOCS_PASSED_TO_ISSUE": "Документы находятся на выдаче в МФЦ"
            }

            dict_address = {
                "Александровский": "Томская область, с.Александровское,ул. Лебедева, д. 30",
                "АО «Альфа Банк»": "г. Томск, пер. 1905 года. д.14/1",
                "Асиновский": "Томская область, г. Асино, ул. Им. Ленина, д. 70",
                "Верхнекетский": "Томская область, рабочий посёлок Белый Яр, улица Таежная, дом 9",
                "г.Кедровый": "Томская область, г. Кедровый, 1 мкр., д.39/1",
                "д.Воронино": "Томская область, Томский район,д. Воронино, ул. Центральная, д. 74",
                "д.Кисловка": "Томская область, Томский район,д. Кисловка, ул. Мира, д. 12",
                "Дом предпринимателя": "Томская область, Московский тракт, д12",
                "ЗАТО Северск": "Томская область, ЗАТО Северск, пр. Коммунистический, д. 103",
                "Зырянский": "Томская область, Зырянский район, Зырянское село, Советская улица, д.46А",
                "Кировский": "г. Томск, пр-т Фрунзе, д.103д",
                "Кожевниковский": "Томская область, Кожевниковский район, село Кожевниково, улица Парковая, дом 1, строение 3",
                "Отдел по Кожевниковскому району": "Томская область, Кожевниковский район, село Кожевниково, улица Парковая, дом 1, строение 3",
                "Колпашевский": "Томская область, Колп+ашевский район, город Колп+ашево, улица Льва Толст+ого, дом 14.",
                "Кривошеинский": "Томская область, Кривошеинский район, с. Кривошеино, ул. Ленина, д. 29",
                "Ленинский": "г. Томск, пер. Дербышевский, д. 26 Б",
                "Отдел по Ленинскому району г. Томска": "г. Томск, пер. Дербышевский, д. 26 Б",
                "Молчановский": "Томская область, Молчановский район, с. Молчаново, ул. Димитрова, д. 15",
                "Октябрьский": "г. Томск, ул. Пушкина, д. 63, стр. 5",
                "Отдел по Октябрьскому району г. Томска": "г. Томск, ул. Пушкина, д. 63, стр. 5",
                "ОЭЗ ТВТ": "Томская область, Томск город, Развития проспект, д3",
                "п.Большая Саровка": "Томская область, Колпашевский район,п. Большая Саровка, ул. Советская, д. 35/2",
                "п.Зональная": "Томская область, Томский район,п. Зональная Станция, ул. Солнечная, д. 23",
                "п.Мирный": "Томская область, Томский район,п. Мирный, ул. Трудовая, д. 2",
                "п.Победа": "Томская область, Шегарский район,п. Победа, ул.Ленина, д. 68",
                "п.Рассвет": "Томская область, Томский район,п.Рассвет, д. 11",
                "ПАО «Банк Уралсиб»": "г. Томск, пр. Фрунзе, д.11а",
                "ПАО «Промсвязьбанк»": "г. Томск, пр. Ленина, д.82Б",
                "ПАО «Томскпромстройбанк»": "г. Томск, пр. Фрунзе, д.90",
                "ПАО Банк «Левобережный»": "г. Томск, пер. Совпартшкольный, д.13",
                "ПАО Банк «ФК Открытие»": "г. Томск, ул. Набережная реки Ушайки, д16",
                "Парабель": "Томская обл, Парабельский р-н, село Парабель, ул Советская, д 102а",
                "Первомайский": "Томская область, Первомайский район,с. Первомайское, ул. Степная, д. 26",
                "с.Анастасьевка": "Томская область, Шегарский район,с. Анастасьевка, пер. Школьный, д. 2",
                "с.Баткат": "Томская область, Шегарский район,с. Баткат, пер.Кооперативный, д. 1",
                "с.Богашево": "Томская область, Томский район,с. Богашево, ул. Новостройка, д. 20 а; ул.Советская, д. 6",
                "с.Вершинино": "Томская область, Томский район,с. Вершинино, пер.Новый, д. 2",
                "с.Володино": "Томская область, Кривошеинский район,с. Володино, ул. Советская, 31",
                "с.Вороново": "Томская область, Кожевниковский район,с. Вороново, ул.Уткина, д. 17",
                "с.Зоркальцево": "Томская область, Томский район,с. Зоркальцево, ул. Совхозная, д. 14",
                "с.Итатка": "Томская область, Томский район,с. Итатка, ул. Гагарина, д. 1",
                "с.Калтай": "Томская область, Томский район,с. Калтай, ул. Ленина, д. 72",
                "с.Корнилово": "Томская область, Томский район,с. Корнилово, ул. Гагарина, д. 29а",
                "с.Красный Яр": "Томская область, Кривошеинский район,с. Красный Яр, ул. Советская, д. 60",
                "с.Малиновка": "Томская область, Томский район,с. Малиновка, ул. Чулымская, д. 30",
                "с.Малиновка(Кожевниковский)": "Томская область, Кожевниковский район,с. Малиновка, ул.Школьная, д. 13",
                "с.Межениновка": "Томская область, Томский район,с. Межениновка, ул. Первомайская, д. 23",
                "с.Могочино": "Томская область, Молчановский район,с. Могочино, ул. Заводская, д. 3",
                "с.Монастырка": "Томская область, Шегарский район,с. Монастырка, ул.Советская, д. 51 а",
                "с.Моряковский": "Томская область, Томский район сельское поселение Моряковское, с.Моряковский Затон, ул. Советская, д. 27",
                "с.Нарга": "Томская область, Молчановский район,с. Нарга, ул. К. Маркса, д. 41",
                "с.Новопокровка": "Томская область, Кожевниковский район,с. Новопокровка, ул. Садовая, д. 2а",
                "с.Новорождественское": "Томская область, Томский район,с. Новорождественское, ул. Советская, д. 62",
                "с.Новоселово": "Томская область, Колпашевский район,с. Новоселово, ул. Центральная, д. 11/1",
                "с.Октябрьское": "Томская обл., Томский р-н., с. Октябрьское, ул. Заводская, д. 7/2 (Библиотека)",
                "с.Песочнодубровка": "Томская область, Кожевниковский район,с. Песочнодубровка, ул. Молодежная, д. 37",
                "с.Рыбалово": "Томская область, Томский район,с. Рыбалово, ул. Коммунистическая, д. 9",
                "с.Старая Ювала": "Томская область, Кожевниковский район,с. Старая Ювала, ул. Ульяновская,д. д. 3а",
                "с.Трубачево": "Томская область, Шегарский район,с. Трубачево, ул.Центральная, д. 7",
                "с.Тунгусово": "Томская область, Молчановский район,с. Тунгусово, ул. У. Кнакиса, д. 5",
                "с.Турунтаево": "Томская область, Томский Район, Турунтаево Село, Новая Улица, д.2а",
                "с.Уртам": "Томская область, Кожевниковский район,с. Уртам, ул. Фрунзе, д. 33",
                "с.Чажемто": "Томская область,Колпашевский район,с. Чажемто, ул. Ленина, д. 24",
                "с.Чилино": "Томская область, Кожевниковский район,с. Чилино, ул. Кустарная, д. 1",
                "Советский": "г. Томск, ул. Тверская, д. 74",
                'Отдел по Советскому району г. Томска': "г. Томск, ул. Тверская, д. 74",
                "Стрежевой": "Томская область, г. Стрежевой, 4 мкрн., д. 405",
                "Тегульдетский": "Томская область, Тегульдетский район, с. Тегульдет, ул. Ленина, д. 97",
                "Чаинский": "Томская область, Чаинский район, с. Подгорное, ул. Лесная, д. 36",
                "ЦОУ для бизнеса в ПАО «Промсвязьбанк»": "город Томск, проспект Ленина, дом 82Б, «Промсвязьбанк»",
                "ЦОУ для бизнеса в АО «Альфа Банк»": "город Томск, переулок  1905 года. Дом 14/1, «Альфа Банк»",
                "ЦОУ для бизнеса в АО «Газпромбанк»": "ГОРОД Томск, 1905 года Переулок, дом 7, «Газпромбанк»",
                "ЦОУ для бизнеса в ПАО Банк «Левобережный»": "город Томск, переулок Совпартшкольный, дом 13,  Банк «Левобережный»",
                "ЦОУ для бизнеса в ПАО «Банк Уралсиб»": "город Томск, проспект Фрунзе, дом 11а «Банк Уралсиб»",
                "ЦОУ для бизнеса в ПАО Банк «ФК Открытие»": "город Томск, улица Набережная реки Ушайки, дом 16, Банк «ФК Открытие»",
                "ЦОУ для бизнеса в ПАО «Томскпромстройбанк»": "город Томск, проспект  Фрунзе, дом 90 «Томскпромстройбанк»",
                "Отдел в г. Кедровый": "Томская область, город Кедровый, 1 микрорайон, дом 39/1.",
                "Отдел по Александровскому району": "Томская область, село Александровское, улица Лебедева, дом 30",
                "Отдел по Асиновскому району": "Томская область, город Асино, улица Им. Ленина, дом 70",
                "Отдел по Верхнекетскому району": "Томская область, рабочий посёлок Белый Яр, улица Таежная, дом 9",
                "Отдел по г. Стрежевому": "Томская область, город Стрежевой, 4 микрорайон, дом 405",
                "Отдел по ЗАТО Северск": "Томская область, ЗАТО Северск, проспект Коммунистический, дом 103",
                "Отдел по Зырянскому району": "Томская область, Зырянский район, Зырянское село, Советская улица, дом 46А",
                "Отдел по Кировскому району г. Томска": "город Томск, проспект Фрунзе, дом 103д",
                "Отдел по Кожевниковскому району": "Томская область, Кожевниковский район, село Кожевниково, улица Парковая, дом 1, строение 3",
                "Отдел по Колпашевскому району": "Томская область, Колп+ашевский район, город Колп+ашево, улица Льва Толст+ого, дом 14.",
                "Отдел по Кривошеинскому району": "Томская область, Кривошеинский район, село Кривошеино, улица Ленина, дом 29",
                "Отдел по Ленинскому району г. Томска": "город Томск, переулок Дербышевский, дом 26 Б",
                "Отдел по Молчановскому району": "Томская область, Молчановский район, село Молчаново, улица Димитрова, дом 15",
                "Отдел по Октябрьскому району г. Томска": "город Томск, улица Пушкина, дом 63, строение 5",
                "Отдел по Парабельскому району": "Томская область, Параб+ельский район, село Параб+ель, улица Сов+етская, д 102а",
                "Отдел по Первомайскому району": "Томская область, Первомайский район, село Первомайское, улица Степная, дом 26",
                "Отдел по Тегульдетскому районутдел по Советскому району г. Томска": "Томская область, Тегульдетский район, село Тегульдет, улица Ленина, дом 97",
                "Отдел по Чаинскому району": "Томская область, Чаинский район, село Подгорное, улица Лесная, дом 36",
                "Отдел по Шегарскому району": "Томская область, Шегарский район, село Мельниково, улица Московская, дом 17",
                'Офис МФЦ для бизнеса в "Доме предпринимателя"': "Томская область, Московский тракт, д12",
                "п. Батурино": "Томская область, Кожевниковский район, село Батурино, улица Советская, дом 34А",
                "п. Самусь": "Томская область, посёлок Самусь, улица Ленина, 28 (библиотека)",
                "ТОСП в д. Березовка Первомайского района": "Томская область, Первомайский район, дом Березовка, улица Центральная, дом 5",
                "ТОСП в д.Воронино Томского района": "Томская область, Томский район, деревня Воронино, улица Центральная, дом 74",
                "ТОСП в д.Кисловка Томского района": "Томская область, Томский район, дом К+исловка, улица Мира, дом 12",
                "ТОСП в п.Большая Саровка Колпашевского района": "Томская область, Колпашевский район, посёлок Большая Саровка, улица Советская, дом 35/2",
                "ТОСП в п.Зональная станция Томского района": "Томская область, Томский район, посёлок Зональная Станция, улица Солнечная, дом 23",
                "ТОСП в п.Мирный Томского района": "Томская область, Томский район, посёлок Мирный, улица Трудовая, дом 2",
                "ТОСП в п. Орехово Первомайского района": "Томская область, Первомайский район, посёлок Орехово, улица Ленина, дом 8",
                "ТОСП в п.Победа Шегарского района": "Томская область, Шегарский район, посёлок Победа, улица Ленина, дом 68",
                "ТОСП в п.Рассвет Томского района": "Томская область, Томский район, посёлок Рассвет, дом 11",
                "ТОСП в п. Улу-Юл Первомайского района": "Томская область, Первомайский район, посёлок Улу-Юл, улица 50 лет Октября, дом 5",
                "ТОСП в с.Анастасьевка Шегарского района": "Томская область, Шегарский район, село Анастасьевка, переулок Школьный, дом 2",
                "ТОСП в с.Баткат Шегарского района": "Томская область, Шегарский район, село Баткат, переулок Кооперативный, дом 1",
                "ТОСП в с.Вершинино Томского района": "Томская область, Томский район, село Вершинино, переулокНовый, дом 2",
                "ТОСП в с.Володино Кривошеинского района": "Томская область, Кривошеинский район, село Володино, улица Советская, 31",
                "ТОСП в с.Вороново Кожевниковского района": "Томская область, Кожевниковский район, село Вороново, улицаУткина, дом 17",
                "ТОСП в с.Зоркальцево Томского района": "Томская область, Томский район, село Зоркальцево, улица Совхозная, дом 14",
                "ТОСП в с.Итатка Томского района": "Томская область, Томский район, село Итатка, улица Гагарина, дом 1",
                "ТОСП в с.Калтай Томского района": "Томская область, Томский район, село Калтай, улица Ленина, дом 72",
                "ТОСП в с. Комсомольск Первомайского района": "Томская область, Первомайский район, село Комсомольск, улица Первомайская, дом 9",
                "ТОСП в с.Корнилово Томского района": "Томская область, Томский район, село Корнилово, улица Гагарина, дом 29а",
                "ТОСП в с.Красный Яр Кривошеинского района": "Томская область, Кривошеинский район, село Красный Яр, улица Советская, дом 60",
                "ТОСП в с.Малиновка Томского района": "Томская область, Томский район, село Малиновка, улица Чулымская, дом 30",
                "ТОСП в с.Межениновка Томского района": "Томская область, Томский район, село Межениновка, улица Первомайская, дом 23",
                "ТОСП в с.Могочино Молчановского района": "Томская область, Молчановский район, село Могочино, улица Заводская, дом 3",
                "ТОСП в с.Монастырка Шегарского района": "Томская область, Шегарский район, село Монастырка, улица Советская, дом 51 а",
                "ТОСП в с.Моряковский Томского района": "Томская область, Томский район, сельское поселение Моряковское, село Моряковский Затон, улица Советская, дом 27",
                "ТОСП в с.Нарга Молчановского района": "Томская область, Молчановский район, село Нарга, улица К. Маркса, дом 41",
                "ТОСП в с.Новопокровка Кожевниковского района": "Томская область, Кожевниковский район, село Новопокровка, улица Садовая, дом 2а",
                "ТОСП в с.Новорождественское Томском районе": "Томская область, Томский район, село Новорождественское, улица Советская, дом 62",
                "ТОСП в с.Новоселово Колпашевского района": "Томская область, Колпашевский район, село Новоселово, улица Центральная, дом 11/1",
                "ТОСП в с.Октябрьское Томского района": "Томская обл., Томский район., село Октябрьское, улица Заводская, дом 7/2 (Библиотека)",
                "ТОСП в с.Песочнодубровка Кожевниковского района": "Томская область, Кожевниковский район, село Песочнодубровка, улица Молодежная, дом 37",
                "ТОСП в с.Рыбалово Томского района": "Томская область, Томский район, село Рыбалово, улица Коммунистическая, дом 9",
                "ТОСП в с. Сергеево Первомайского района": "Томская область, Первомайский район, село Сергеево, улица Школьная, дом 3",
                "ТОСП в с.Старая Ювала Кожевниковском района": "Томская область, Кож+евниковский район, село Ст+арая Ювала, улица Уль+яновская, дом 3а",
                "ТОСП в с.Трубачево Шегарского района": "Томская область, Шегарский район, село Трубачево, улица Центральная, дом 7",
                "ТОСП в с. Тунгусово Молчановского району": "Томская область, Молчановский район, село Тунгусово, улица  Кнакиса, дом 5",
                "ТОСП в с.Турунтаево Томского района": "Томская область, Томский Район, Турунтаево Село, Новая Улица, дом 2а",
                "ТОСП в с.Уртам Кожевниковского района": "Томская область, Кожевниковский район, село Уртам, улица Фрунзе, дом 33",
                "ТОСП в с.Чажемто Колпашевского района": "Томская область, Колпашевский район, село Чажемто, улица Ленина, дом 24",
                "ТОСП в с.Чилино Кожевниковского района": "Томская область, Кожевниковский район, село Чилино, улица Кустарная, дом 1",
                "ТОСП ОЭЗ ТВТ": "Томская область, Томск город, проспект  Развития, д3",
                "ТОСП с.Богашево Томского района": "Томская область, Томский район, село Богашево, улица Новостройка, дом 20 а; либо улица Советская, дом 6",
                "ТОСП с.Малиновка Кожевниковского района": "Томская область, Кожевниковский район, село Малиновка, улица Школьная, дом 13"
            }

            dict_address_services = {
                "Александровский": "425",
                "АО «Альфа Банк»": "587",
                "Асиновский": "545",
                "Верхнекетский": "635",
                "г.Кедровый": "455",
                "д.Воронино": "395",
                "д.Кисловка": "491",
                "Дом предпринимателя": "371",
                "ЗАТО Северск": "431",
                "Зырянский": "665",
                "Кировский": "533",
                "Кожевниковский": "377",
                "Отдел по Кожевниковскому району": "377",
                "Колпашевский": "611",
                "Кривошеинский": "593",
                "Ленинский": "461",
                "Отдел по Ленинскому району г. Томска": "461",
                "Молчановский": "503",
                "Октябрьский": "641",
                "Отдел по Октябрьскому району г. Томска": "641",
                "ОЭЗ ТВТ": "509",
                "п.Большая Саровка": "605",
                "п.Зональная": "443",
                "п.Мирный": "401",
                "п.Победа": "629",
                "п.Рассвет": "539",
                "ПАО «Банк Уралсиб»": "557",
                "ПАО «Промсвязьбанк»": "683",
                "ПАО «Томскпромстройбанк»": "389",
                "ПАО Банк «Левобережный»": "449",
                "ПАО Банк «ФК Открытие»": "677",
                "Парабель": "2894026",
                "Первомайский": "719",
                "с.Анастасьевка": "659",
                "с.Баткат": "515",
                "с.Богашево": "575",
                "с.Вершинино": "437",
                "с.Володино": "647",
                "с.Вороново": "707",
                "с.Зоркальцево": "479",
                "с.Итатка": "383",
                "с.Калтай": "329",
                "с.Корнилово": "419",
                "с.Красный Яр": "563",
                "с.Малиновка": "599",
                "с.Малиновка(Кожевниковский)": "713",
                "с.Межениновка": "731",
                "с.Могочино": "335",
                "с.Монастырка": "617",
                "с.Моряковский": "551",
                "с.Нарга": "497",
                "с.Новопокровка": "407",
                "с.Новорождественское": "725",
                "с.Новоселово": "413",
                "с.Октябрьское": "527",
                "с.Песочнодубровка": "467",
                "с.Рыбалово": "521",
                "с.Старая Ювала": "653",
                "с.Трубачево": "671",
                "с.Тунгусово": "473",
                "с.Турунтаево": "623",
                "с.Уртам": "569",
                "с.Чажемто": "485",
                "с.Чилино": "359",
                "Советский": "689",
                'Отдел по Советскому району г. Томска': "689",
                "Стрежевой": "347",
                "Тегульдетский": "365",
                "Чаинский": "695",
                "ЦОУ для бизнеса в ПАО «Промсвязьбанк»": "683",
                "ЦОУ для бизнеса в АО «Альфа Банк»": "587",
                "ЦОУ для бизнеса в АО «Газпромбанк»": "342595",
                "ЦОУ для бизнеса в ПАО Банк «Левобережный»": "449",
                "ЦОУ для бизнеса в ПАО «Банк Уралсиб»": "557",
                "ЦОУ для бизнеса в ПАО Банк «ФК Открытие»": "677",
                "ЦОУ для бизнеса в ПАО «Томскпромстройбанк»": "389",
                "Отдел в г. Кедровый": "455",
                "Отдел по Александровскому району": "425",
                "Отдел по Асиновскому району": "545",
                "Отдел по Верхнекетскому району": "635",
                "Отдел по г. Стрежевому": "347",
                "Отдел по ЗАТО Северск": "431",
                "Отдел по Зырянскому району": "665",
                "Отдел по Кировскому району г. Томска": "533",
                "Отдел по Кожевниковскому району": "377",
                "Отдел по Колпашевскому району": "611",
                "Отдел по Кривошеинскому району": "593",
                "Отдел по Ленинскому району г. Томска": "461",
                "Отдел по Молчановскому району": "503",
                "Отдел по Октябрьскому району г. Томска": "641",
                "Отдел по Парабельскому району": "2894026",
                "Отдел по Первомайскому району": "719",
                "Отдел по Тегульдетскому районутдел по Советскому району г. Томска": "365",
                "Отдел по Чаинскому району": "695",
                "Отдел по Шегарскому району": "701",
                'Офис МФЦ для бизнеса в "Доме предпринимателя"': "371",
                "п. Батурино": "",
                "п. Самусь": "",
                "ТОСП в д. Березовка Первомайского района": "",
                "ТОСП в д.Воронино Томского района": "395",
                "ТОСП в д.Кисловка Томского района": "491",
                "ТОСП в п.Большая Саровка Колпашевского района": "605",
                "ТОСП в п.Зональная станция Томского района": "443",
                "ТОСП в п.Мирный Томского района": "401",
                "ТОСП в п. Орехово Первомайского района": "",
                "ТОСП в п.Победа Шегарского района": "629",
                "ТОСП в п.Рассвет Томского района": "539",
                "ТОСП в п. Улу-Юл Первомайского района": "",
                "ТОСП в с.Анастасьевка Шегарского района": "659",
                "ТОСП в с.Баткат Шегарского района": "515",
                "ТОСП в с.Вершинино Томского района": "437",
                "ТОСП в с.Володино Кривошеинского района": "647",
                "ТОСП в с.Вороново Кожевниковского района": "707",
                "ТОСП в с.Зоркальцево Томского района": "479",
                "ТОСП в с.Итатка Томского района": "383",
                "ТОСП в с.Калтай Томского района": "329",
                "ТОСП в с. Комсомольск Первомайского района": "",
                "ТОСП в с.Корнилово Томского района": "419",
                "ТОСП в с.Красный Яр Кривошеинского района": "563",
                "ТОСП в с.Малиновка Томского района": "599",
                "ТОСП в с.Межениновка Томского района": "731",
                "ТОСП в с.Могочино Молчановского района": "335",
                "ТОСП в с.Монастырка Шегарского района": "617",
                "ТОСП в с.Моряковский Томского района": "551",
                "ТОСП в с.Нарга Молчановского района": "497",
                "ТОСП в с.Новопокровка Кожевниковского района": "407",
                "ТОСП в с.Новорождественское Томском районе": "725",
                "ТОСП в с.Новоселово Колпашевского района": "413",
                "ТОСП в с.Октябрьское Томского района": "527",
                "ТОСП в с.Песочнодубровка Кожевниковского района": "467",
                "ТОСП в с.Рыбалово Томского района": "521",
                "ТОСП в с. Сергеево Первомайского района": "",
                "ТОСП в с.Старая Ювала Кожевниковском района": "653",
                "ТОСП в с.Трубачево Шегарского района": "671",
                "ТОСП в с. Тунгусово Молчановского району": "473",
                "ТОСП в с.Турунтаево Томского района": "623",
                "ТОСП в с.Уртам Кожевниковского района": "569",
                "ТОСП в с.Чажемто Колпашевского района": "485",
                "ТОСП в с.Чилино Кожевниковского района": "359",
                "ТОСП ОЭЗ ТВТ": "509",
                "ТОСП с.Богашево Томского района": "575",
                "ТОСП с.Малиновка Кожевниковского района": "713",
            }

            caseNumber = (args,)[0][0]

            if caseNumber == "":
                # К сожалению не удалось распознать номер заявления
                return {
                    "status_eng": "",
                    "status_rus": "",
                    "code": "not_found",
                    "caseNumber": "",
                    "caseNumberSpell": "",
                    "debug": "caseNumber: " + caseNumber
                }

            caseNumberSpell = (" ".join(caseNumber))
            result = {
                "status_eng": "",
                "status_rus": "",
                "code": "not_found",
                "caseNumber": "",
                "caseNumberSpell": "",
                "debug": ""
            }

            import requests

            status_url = status_url.format(caseNumber)
            response = requests.get(status_url, timeout=(2, 5))
            response.encoding = 'utf-8'
            xstatus = response.json()
            if xstatus["requesters"][0]["lastName"] != None:
                fam = xstatus["requesters"][0]["lastName"].replace(' ', '')
            else:
                fam = ''
            if xstatus["requesters"][0]["lastName"] != None:
                name = xstatus["requesters"][0]["firstName"].replace(' ', '')
            else:
                name = ''
            if xstatus["requesters"][0]["patronymic"] != None:
                otch = xstatus["requesters"][0]["patronymic"].replace(' ', '')
            else:
                otch = ''
            if isinstance(xstatus, dict):
                if xstatus.get("success", False):
                    caseStatus = xstatus["order"]["status"]

                    caseAddres = xstatus["order"]["issuePlace"]

                    state = False
                    if caseStatus == 'ISSUE' or caseStatus == 'CALL_CENTER' or caseStatus == 'DELIVERY' or caseStatus == 'DOCS_PASSED_TO_ISSUE':
                        state = True

                    caseStatus = caseStatus.upper()
                    caseDictStatus = dict_status_operator.get(caseStatus, "")
                    if len(caseDictStatus) > 0:
                        result = {
                            "status_eng": caseStatus,
                            "status_rus": caseDictStatus,
                            "code": "operator",
                            "caseNumber": caseNumber,
                            "caseNumberSpell": caseNumberSpell,
                            "debug": "Статус от АИС МФЦ по которому заказчик просит переводить на оператора: " + caseStatus
                        }
                    else:
                        caseDictStatus = dict_status_new.get(caseStatus, "")

                        caseDictAddres = dict_address.get(caseAddres, "")

                        caseDictMfcId = dict_address_services.get(caseAddres, "111")

                        rez = ' по адресу ' + caseDictAddres if caseDictAddres != '' and (caseStatus == 'RETURN_UNCLAIMED_RESULT' or caseStatus == 'ISSUE' or caseStatus == 'CALL_CENTER' or caseStatus == 'DELIVERY' or caseStatus == 'DOCS_PASSED_TO_ISSUE') else ''

                        if len(caseDictStatus) > 0:
                            debug = "Номер заявления: " + caseNumber + "; Статус заявления ENG: " + \
                                caseStatus + "; Статус заявления RUS: " + caseDictStatus
                            result = {
                                "status_eng": caseStatus,
                                "state": state,
                                "status_rus": f'{caseDictStatus}{rez}',
                                "code": "found",
                                "caseNumber": caseNumber,
                                "caseNumberSpell": caseNumberSpell,
                                "debug": debug,
                                "caseDictMfcId": caseDictMfcId,
                                'fam': fam,
                                'name': name,
                                'otch': otch,
                                'fio': fam + " " + name + " " + otch
                                }
                        else:
                            print("st1")
                            result = {
                                "status_eng": caseStatus,
                                "status_rus": caseDictStatus,
                                "code": "error",
                                "caseNumber": caseNumber,
                                "caseNumberSpell": caseNumberSpell,
                                "debug": "АИС МФЦ вернуло статус, который нужно внести в справочник речевика.",
                                "caseDictMfcId": caseDictMfcId,
                            }
                else:
                    print("st2")
                    result = {
                        "status_eng": "",
                        "status_rus": "",
                        "code": "not_found",
                        "caseNumber": "",
                        "caseNumberSpell": caseNumberSpell,
                        "debug": "Ответ от АИС МФЦ: " + str(xstatus)
                    }
            else:
                print("st3")
                result = {
                    "status_eng": "",
                    "status_rus": "",
                    "code": "error",
                    "caseNumber": "",
                    "caseNumberSpell": "",
                    "debug": "Ответ от АИС МФЦ: " + str(xstatus)
                }
        except Exception as e:
            # К сожалению не удалось выяснить статус документов по вашему номеру
            print("BASE_readiness_status:", e)
            result = {
                "status_eng": "",
                "status_rus": "",
                "code": "error",
                "caseNumber": "",
                "caseNumberSpell": "",
                "debug": "Исключение системы: " + str(e)
            }
        return result

    async def delete_in_cache(*args):
        global cache
        key = (*args,)

        h = key[-1]

        import ast

        if 'aa50aae2-8879-4945-9553-825e911fc9c4' in h:
            h = ast.literal_eval(h)
            h['fields']['aa50aae2-8879-4945-9553-825e911fc9c4'] = ''
            fields = str(h)

            key_1 = ('None', 'None', key[2], key[3], fields)
            key_2 = (key[0], 'None', key[2], key[3], fields)

            if key_1 in cache:
                del cache[key_1]
                print("Delete in cache!")
            if key_2 in cache:
                del cache[key_2]
                print("Delete in cache!")
            return

        elif 'b1a8f2ae-3a16-4018-ad69-0a843e61796c' in h:
            h = ast.literal_eval(h)
            h['fields']['b1a8f2ae-3a16-4018-ad69-0a843e61796c'] = ''
            h['fields']['667a73c2-e026-483d-8033-1caadcea8f99'] = ''
            h['fields']['fbc884bf-b18b-4591-8f4d-fd229b9dc11d'] = ''
            fields = str(h)

            key_1 = ('None', 'None', key[2], key[3], fields)
            key_2 = (key[0], 'None', key[2], key[3], fields)

            if key_1 in cache:
                del cache[key_1]
                print("Delete in cache!")
            if key_2 in cache:
                del cache[key_2]
                print("Delete in cache!")
            return

        elif '48b24708-ad36-4aa7-9772-17940e7741c8' in h:
            h = ast.literal_eval(h)
            h['fields']['48b24708-ad36-4aa7-9772-17940e7741c8'] = ''
            h['fields']['cf535155-7337-4310-84d5-3e6e720bf36e'] = ''
            fields = str(h)

            key_1 = ('None', 'None', key[2], key[3], fields)
            key_2 = (key[0], 'None', key[2], key[3], fields)

            if key_1 in cache:
                del cache[key_1]
                print("Delete in cache!")
            if key_2 in cache:
                del cache[key_2]
                print("Delete in cache!")
            return

        else:
            fields = h
            key_1 = ('None', 'None', key[2], key[3], fields)
            key_2 = (key[0], 'None', key[2], key[3], fields)

            if key_1 in cache:
                del cache[key_1]
                print("Delete in cache!")
            if key_2 in cache:
                del cache[key_2]
                print("Delete in cache!")
            return

    async def base_get_events_dates(self, location):

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    sql_check = f"SELECT date FROM calendar WHERE location = '{location}'"
                    await cursor.execute(sql_check)
                    result = await cursor.fetchall()

            dates = []
            for i in range(len(result)):
                dates.append(result[i][0])

        except Exception as e:
            print('BASE_base_get_events_dates:', e)
        return dates

    # async def base_get_events_event(self, location, date):

    #     try:
    #         pool = await aiomysql.create_pool(
    #             host="172.18.11.103",
    #             user="root",
    #             password="enigma1418",
    #             db="mdtomskbot",
    #             connect_timeout=2
    #         )
    #         async with pool.acquire() as conn:
    #             async with conn.cursor() as cursor:

    #                 sql_check = f"SELECT event FROM calendar WHERE location = '{location}' AND date = '{date}'"
    #                 await cursor.execute(sql_check)
    #                 result = await cursor.fetchall()

    #         event = result[0][0]

    #     except Exception as e:
    #         print('BASE:', e)
    #     return event

    async def base_get_date_and_time(self, date, time, department, service, fields_s, condition):
        try:
            # Простая асинхронная функция для получения данных с запросом к API
            async def fetch_data_from_api_async(date, time, department, service, fields_s):
                print("Making API request...")

                if fields_s != 'None':
                    fields = json.loads(fields_s)["fields"]
                    fields = json.dumps(fields)
                    casecount = json.loads(fields_s)["casecount"]
                    # Удаление символов '{' и '}'
                    fields = fields.replace("'", '"')

                server = "https://equeue.mfc.tomsk.ru"

                prms_dates = {
                    "mfc": int(department),
                    "service": str(service),
                    "casecount": int(casecount),
                    "fields": fields,
                    "source": "ADMINISTRATOR_BOOKING" if department == "342595" else "VOICE",
                }

                async with aiohttp.ClientSession() as session:
                    async with session.get(server + "/rest/book/dates", params=prms_dates, timeout=10) as response:
                        dates = await response.json()
                        return dates

            # Простая асинхронная функция для получения данных с запросом к API
            async def fetch_time_from_api_async(date, time, department, service, fields_s):
                print("Making API request...")

                if fields_s != 'None':
                    fields = json.loads(fields_s)["fields"]
                    fields = json.dumps(fields)
                    casecount = json.loads(fields_s)["casecount"]
                    # Удаление символов '{' и '}'
                    fields = fields.replace("'", '"')

                server = "https://equeue.mfc.tomsk.ru"

                prms_times = {
                    "mfc": int(department),
                    "service": str(service),
                    "casecount": int(casecount),
                    "fields": fields,
                    "date": str(date),
                    "source": "ADMINISTRATOR_BOOKING" if department == "342595" else "VOICE",
                }

                async with aiohttp.ClientSession() as session:
                    async with session.get(server + "/rest/book/times", params=prms_times, timeout=10) as response:
                        times = await response.json()
                        return times

            # Аналогично декоратор для кэширования результатов асинхронной функции
            def cache_results_async(func):

                @functools.wraps(func)
                async def wrapper(*args):
                    key = (*args,)  # Преобразуем в кортеж

                    h = key[-1]

                    import ast

                    if 'aa50aae2-8879-4945-9553-825e911fc9c4' in h:
                        h = ast.literal_eval(h)
                        h['fields']['aa50aae2-8879-4945-9553-825e911fc9c4'] = ''
                        fields = str(h)

                        key = (key[0], key[1], key[2], key[3], fields)

                        if key in cache:
                            print("Data found in cache!")
                            res = cache[key]
                            if condition:
                                await base.delete_in_cache(date, time, department, service, fields_s)
                            return res

                    elif 'b1a8f2ae-3a16-4018-ad69-0a843e61796c' in h:
                        h = ast.literal_eval(h)
                        h['fields']['b1a8f2ae-3a16-4018-ad69-0a843e61796c'] = ''
                        h['fields']['667a73c2-e026-483d-8033-1caadcea8f99'] = ''
                        h['fields']['fbc884bf-b18b-4591-8f4d-fd229b9dc11d'] = ''
                        fields = str(h)

                        key = (key[0], key[1], key[2], key[3], fields)

                        if key in cache:
                            print("Data found in cache!")
                            res = cache[key]
                            if condition:
                                await base.delete_in_cache(date, time, department, service, fields_s)
                            return res

                    elif '48b24708-ad36-4aa7-9772-17940e7741c8' in h:
                        h = ast.literal_eval(h)
                        h['fields']['48b24708-ad36-4aa7-9772-17940e7741c8'] = ''
                        h['fields']['cf535155-7337-4310-84d5-3e6e720bf36e'] = ''
                        fields = str(h)

                        key = (key[0], key[1], key[2], key[3], fields)

                        if key in cache:
                            print("Data found in cache!")
                            res = cache[key]
                            if condition:
                                await base.delete_in_cache(date, time, department, service, fields_s)
                            return res

                    elif '56ed2b59-2293-42c7-8493-46d30cfebdf6' in h:
                        h = ast.literal_eval(h)
                        h['fields']['56ed2b59-2293-42c7-8493-46d30cfebdf6'] = ''
                        h['fields']['4b2ab9f4-f1b2-4b41-8e1b-fd719bd797b3'] = ''
                        fields = str(h)

                        key = (key[0], key[1], key[2], key[3], fields)

                        if key in cache:
                            print("Data found in cache!")
                            res = cache[key]
                            if condition:
                                await base.delete_in_cache(date, time, department, service, fields_s)
                            return res

                    elif '64be467d-5881-416e-be81-fc697334b6e4' in h:
                        h = ast.literal_eval(h)
                        h['fields']['64be467d-5881-416e-be81-fc697334b6e4'] = ''
                        h['fields']['541f0b86-f354-40ae-b2cc-71b091929e31'] = ''
                        fields = str(h)

                        key = (key[0], key[1], key[2], key[3], fields)

                        if key in cache:
                            print("Data found in cache!")
                            res = cache[key]
                            if condition:
                                await base.delete_in_cache(date, time, department, service, fields_s)
                            return res

                    elif key in cache:
                        print("Data found in cache!")
                        res = cache[key]
                        if condition:
                            await base.delete_in_cache(date, time, department, service, fields_s)
                        return res

                    result = await func(*args)
                    cache[key] = result
                    return result

                return wrapper

            # Применяем декоратор к асинхронной функции получения данных
            @cache_results_async
            async def fetch_data_async(date, time, department, service, fields_s):
                return await fetch_data_from_api_async(date, time, department, service, fields_s)

            # Применяем декоратор к асинхронной функции получения данных
            @cache_results_async
            async def fetch_time_async(date, time, department, service, fields_s):
                return await fetch_time_from_api_async(date, time, department, service, fields_s)

            if date == 'None':
                dates = await fetch_data_async(date, time, department, service, fields_s)
            else:
                dates = None

            if time == 'None' and date != 'None':
                times = await fetch_time_async(date, time, department, service, fields_s)
            else:
                times = None
        except Exception as e:
            print('BASE_base_get_date_and_time:', e)

        return dates, times

    async def base_record(self, fio, filial, usluga, time, date, fields_all):

        fields = json.loads(fields_all)["fields"]
        fields = json.dumps(fields)
        casecount = json.loads(fields_all)["casecount"]
        # Удаление символов '{' и '}'
        fields = fields.replace("'", '"')
        fields = json.loads(fields)

        prms = {
            "mfcId": int(filial),
            "serviceId": usluga,
            "caseCount": int(casecount),
            "start": date + "T" + time,
            "source": "ADMINISTRATOR_BOOKING" if filial == "342595" else "VOICE",
            "customer": {
                "name": fio,
                "phone": self.tel
            },
            "fields": fields
        }

        async def get_key_by_value(dictionary, value):
            for key, val in dictionary.items():
                if val == value:
                    return key
            return None

        server = "https://equeue.mfc.tomsk.ru"
        async with aiohttp.ClientSession() as session:
            async with session.post(server + "/rest/book", json=prms, timeout=10) as response:
                response_res = await response.json()

        if response_res.get("success", False) == True:
            res = {
                "code": "ok",
                "number": response_res["data"]["prefix"] + '-' + str(response_res["data"]["number"]),
                "fio": fio,
                "phone": self.tel,
                "visitTime": time,
                "dateTime": date,
                'department': await get_key_by_value(filials, filial)
            }

            date_ = str(datetime.datetime.now().date())
            time_ = str(datetime.datetime.now().time())[:-7]
            time_obj = datetime.datetime.strptime(time_, "%H:%M:%S")
            new_time_obj = time_obj + datetime.timedelta(hours=7)
            time_ = new_time_obj.strftime("%H:%M:%S")

            try:
                pool = await aiomysql.create_pool(
                    host="172.18.11.103",
                    user="root",
                    password="enigma1418",
                    db="mdtomskbot",
                    autocommit=False,
                    connect_timeout=2
                )
                async with pool.acquire() as conn:
                    async with conn.cursor() as cursor:
                        await conn.begin()
                        await cursor.execute(
                            f"INSERT INTO vkontakte_reg (sender, talon, time, date, department, service, uuid, tel, fio) "
                            f"VALUES ('{self.user_id}', '{res['number']}', '{time}', '{date}', '{await get_key_by_value(filials_1, filial)}', '{await get_key_by_value(services, usluga)}', '{response_res["data"]["uuid"]}', '{self.tel}', '{fio}');"
                        )
                        await cursor.execute(
                            f"INSERT INTO registration (fio, tel, talon, department, date, time, platform) "
                            f"VALUES ('{fio}', '{self.tel}', '{res['number']}', '{await get_key_by_value(filials, filial)}', '{date_}', '{time_}', 'VK');"
                        )

                        # await cursor.execute(
                        #     f"UPDATE notification SET talon = CONCAT(COALESCE(talon, ''), '') WHERE id_vk = '{int(self.user_id)}'"
                        # )
                        # await cursor.execute(
                        #     f"UPDATE notification SET department = CONCAT(COALESCE(department, ''), '') WHERE id_vk = '{int(self.user_id)}'"
                        # )
                        # await cursor.execute(
                        #     f"UPDATE notification SET dates = CONCAT(COALESCE(dates, ''), '') WHERE id_vk = '{int(self.user_id)}'"
                        # )
                        # await cursor.execute(
                        #     f"UPDATE notification SET talon = CONCAT(talon, ', {res['number']}') WHERE id_vk = '{int(self.user_id)}'"
                        # )
                        # await cursor.execute(
                        #     f"UPDATE notification SET department = CONCAT(department, ', {await get_key_by_value(filials_1, filial)}') WHERE id_vk = '{int(self.user_id)}'"
                        # )
                        # await cursor.execute(
                        #     f"UPDATE notification SET dates = CONCAT(dates, ', {date}') WHERE id_vk = '{int(self.user_id)}'"
                        # )

                        await conn.commit()

            except Exception as e:
                print('BASE_base_record:', e)
        else:
            res = {
                "code": "err_no_slots",
                "err_msg": str(response_res)
            }
        return res

    async def phone_select(self):
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(
                        f"SELECT ani FROM notification WHERE id_vk = '{self.user_id}'"
                    )
                    result = await cursor.fetchall()
                    await cursor.execute(
                        f"SELECT new_ani FROM notification WHERE id_vk = '{self.user_id}'"
                    )
                    result_1 = await cursor.fetchall()
                    if result:
                        # значениe ani существует
                        answer = True
                    else:
                        # значениe ani не существует
                        answer = False

        except Exception as e:
            print('BASE_phone_select:', e)
        return answer, result, result_1

    async def agreement_select(self):

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    try:
                        await cursor.execute(
                            f"SELECT vk FROM agreement WHERE id_vk = '{self.user_id}'"
                        )
                        result = await cursor.fetchall()

                        if int(result[0][0]) or not int(result[0][0]):
                            # значениe vk существует
                            answer = True
                        else:
                            # значениe vk не существует
                            answer = False
                    except:
                        answer = False
        except Exception as e:
            print('BASE_agreement_select:', e)
        return answer, str(result[0][0])

    async def phone_input(self):
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(f"SELECT id_vk FROM notification WHERE ani = '{int(self.tel)}'")
                    result = await cursor.fetchall()

                    try:
                        if result[0][0] != '' and result[0][0] != None:
                            res = False
                        else:
                            res = True
                    except:
                        res = True

                    try:
                        await cursor.execute(
                            f"INSERT INTO notification (ani, id_vk) "
                            f"VALUES ('{int(self.tel)}', '{self.user_id}');"
                        )
                    except:
                        pass
                    try:
                        await cursor.execute(
                            f"UPDATE notification SET id_vk = '{self.user_id}' WHERE ani = '{int(self.tel)}';"
                        )
                    except:
                        pass

        except Exception as e:
            print('BASE_phone_input:', e)
        return res

    async def agreement_input(self, *args):

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    # Проверяем, есть ли уже запись с таким же номером телефона
                    await cursor.execute(
                        f"SELECT id_vk FROM agreement WHERE tel = '{str(self.tel).replace('+7', '8')}';"
                    )
                    existing_id = await cursor.fetchone()

                    if existing_id:
                        # Если запись с таким номером телефона уже существует, обновляем ее
                        await cursor.execute(
                            f"UPDATE agreement SET id_vk = '{self.user_id}', vk = '{args[0]}' WHERE tel = '{str(self.tel).replace('+7', '8')}';"
                        )
                    else:
                        # Если записи с таким номером телефона нет, создаем новую
                        await cursor.execute(
                            f"INSERT INTO agreement (id_vk, vk, tel)"
                            f"VALUES ('{self.user_id}', '{args[0]}', '{str(self.tel).replace('+7', '8')}');"
                        )

        except Exception as e:
            print('BASE_agreement_input:', e)
        return

    # async def phone_input_new(self):
    #     import datetime
    #     date = datetime.datetime.now().date()
    #     # time = str(datetime.datetime.now().time())[:-7]
    #     # time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
    #     # new_time_obj = time_obj + datetime.timedelta(hours=7)
    #     # time = new_time_obj.strftime("%H:%M:%S")
    #     try:
    #         pool = await aiomysql.create_pool(
    #             host="172.18.11.103",
    #             user="root",
    #             password="enigma1418",
    #             db="mdtomskbot",
    #             autocommit=True,
    #             connect_timeout=2
    #         )
    #         async with pool.acquire() as conn:
    #             async with conn.cursor() as cursor:

    #                 await cursor.execute(
    #                     f"SELECT date FROM notification WHERE id_vk = '{self.user_id}'"
    #                 )
    #                 result_date = await cursor.fetchall()

    #                 await cursor.execute(
    #                     f"SELECT ani FROM notification WHERE id_vk = '{self.user_id}'"
    #                 )
    #                 result_phone = await cursor.fetchall()

    #                 await cursor.execute(
    #                     f"SELECT new_ani FROM notification WHERE id_vk = '{self.user_id}'"
    #                 )
    #                 result_phone_new = await cursor.fetchall()

    #                 if result_date[0][0] == None or result_date[0][0] == '':

    #                     await cursor.execute(
    #                         f"UPDATE notification SET new_ani = '{self.tel}' WHERE ani = '{int(result_phone[0][0])}' "
    #                     )
    #                     await cursor.execute(
    #                         f"UPDATE notification SET date = '{date}' WHERE ani = '{int(result_phone[0][0])}' "
    #                     )

    #                     result = True
    #                 else:
    #                     from datetime import datetime
    #                     result_date = datetime.strptime(result_date[0][0], "%Y-%m-%d").date()
    #                     if result_date != date:
    #                         await cursor.execute(
    #                             f"UPDATE notification SET new_ani = '{self.tel}' WHERE ani = '{int(result_phone[0][0])}' "
    #                         )
    #                         await cursor.execute(
    #                             f"UPDATE notification SET date = '{date}' WHERE ani = '{int(result_phone[0][0])}' "
    #                         )
    #                         result = True
    #                     elif result_phone[0][0] == self.tel or result_phone_new[0][0] == self.tel:
    #                         result = True
    #                     else:
    #                         result = False

    #     except Exception as e:
    #         print('BASE_phone_input_new:', e)
    #     return result

    async def update_notification(self, cursor, phone, date):
        # Обновляем запись в notification новым номером телефона и датой
        await cursor.execute(
            f"UPDATE notification SET new_ani = '{self.tel}', date = '{date}' WHERE ani = '{int(phone)}'"
        )

    async def phone_input_new(self):
        try:
            import datetime

            # Устанавливаем текущую дату
            date = datetime.datetime.now().date()

            # Подключаемся к базе данных
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )

            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    # Получаем текущие данные из таблицы notification
                    await cursor.execute(
                        f"SELECT date, ani, new_ani FROM notification WHERE id_vk = '{self.user_id}'"
                    )
                    result = await cursor.fetchone()

                    if result:
                        result_date, result_phone, result_phone_new = result

                        # Проверяем, если дата пуста (None или пустая строка)
                        if not result_date:
                            await self.update_notification(cursor, result_phone, date)
                            return True

                        # Сравниваем даты и обновляем данные при необходимости
                        result_date = datetime.datetime.strptime(result_date, "%Y-%m-%d").date()
                        if result_date != date:
                            await self.update_notification(cursor, result_phone, date)
                            return True
                        elif result_phone == self.tel or result_phone_new == self.tel:
                            return True

                    return False

        except Exception as e:
            print('BASE_phone_input_new:', e)
            return False

    async def base_count_record(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'record');"
                    )

        except Exception as e:
            print('BASE_base_count_record', e)
        return

    async def base_count_application(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'application');"
                    )

        except Exception as e:
            print('BASE_base_count_application', e)
        return

    async def base_count_grade(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'grade');"
                    )

        except Exception as e:
            print('BASE_base_count_grade', e)
        return

    async def base_review(*args):

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO ratings_reviews (number_statement, number_date, number_department, number_grade, number_waiting_time, number_time, number_employee, number_review) "
                        f"VALUES ('{(args,)[0][1]}', '{(args,)[0][2]}', '{(args,)[0][3]}', '{(args,)[0][4]}', '{(args,)[0][5]}', '{(args,)[0][6]}', '{(args,)[0][7]}', '{(args,)[0][8]}');"
                    )

        except Exception as e:
            print('BASE_base_review', e)
        return

    async def base_post_application(*args):

        date = str(datetime.datetime.now().date())

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    # Предполагаем, что args - это кортеж: (fio, contacts, type_service, service)
                    await cursor.execute(
                        "INSERT INTO application (fio, contacts, type_service, service, date, category)"
                        "VALUES (%s, %s, %s, %s, %s, %s)",
                        ((args,)[0][0], (args,)[0][1], (args,)[0][2], (args,)[0][3], date, (args,)[0][4])
                    )
        except Exception as e:
            print('BASE_base_post_application', e)
        return

    async def base_count_status(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'status');"
                    )

        except Exception as e:
            print('BASE_base_count_status:', e)
        return

    async def base_count_inf(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'inf');"
                    )

        except Exception as e:
            print('BASE_base_count_inf:', e)
        return

    async def base_count_events(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'event');"
                    )

        except Exception as e:
            print('BASE_base_count_events:', e)
        return

    async def base_count_cons_mfc(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'cons');"
                    )

        except Exception as e:
            print('BASE_base_count_cons_mfc:', e)
        return

    async def base_count_cancel_record(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) "
                        f"VALUES ('{self.user_id}', '{date}', '{time}', 'cancel_record');"
                    )

        except Exception as e:
            print('BASE_base_count_cancel_record:', e)
        return

    async def base_count_anniversary(self):

        date = str(datetime.datetime.now().date())
        time = str(datetime.datetime.now().time())[:-7]
        time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        new_time_obj = time_obj + datetime.timedelta(hours=7)
        time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"INSERT INTO count_vk (id, date, time, button) VALUES ('{self.user_id}', '{date}', '{time}', 'anniversary');"
                    )

        except Exception as e:
            print('BASE_base_count_anniversary:', e)
        return

    async def base_anniversary(self, text):

        date = str(datetime.datetime.now().date())
        # time = str(datetime.datetime.now().time())[:-7]
        # time_obj = datetime.datetime.strptime(time, "%H:%M:%S")
        # new_time_obj = time_obj + datetime.timedelta(hours=7)
        # time = new_time_obj.strftime("%H:%M:%S")
        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(f"INSERT INTO anniversary (text, date, sender) VALUES ('{text}', '{date}', '{self.user_id}');")

        except Exception as e:
            print('BASE_base_anniversary:', e)
        return

    async def events(self, event, date, platform):

        try:
            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    # # Выполняем SELECT запрос
                    # await cursor.execute(
                    #     f"SELECT * FROM notification WHERE id_vk = {self.user_id};"
                    # )
                    # # Получаем результаты запроса
                    # myresult = await cursor.fetchall()

                    # # Выполняем INSERT запрос with parameterized query
                    # await cursor.execute(
                    #     "INSERT INTO events (id_vk, id_tb, event, date) VALUES (%s, %s, %s, %s)",
                    #     (self.user_id, myresult[-1][2], event, date)
                    # )

                    # Выполняем INSERT запрос with parameterized query
                    await cursor.execute(
                        "INSERT INTO events (id_vk, event, date, platform) VALUES (%s, %s, %s, %s)",
                        (self.user_id, event, date, platform)
                    )

        except Exception as e:
            print('BASE_events:', e)
        return

    async def information_about_coupons(*args):

        import requests

        server = "https://equeue.mfc.tomsk.ru"

        SERVICES = [
            'Паспорт, прописка, ИНН, СНИЛС, ОМС',
            'Субсидии, льготы, компенсации, пенсии',
            'Предоставление сведений из ЕГРН',
            'Прекращение, приостановка, приобщение документов по ранее принятому делу (недвижимость)',
            'Справки УМВД и Пенсионного фонда (справки о несудимости, выписки ИЛС, справки о размере пенсии и другие)',
            'Получение разрешений органов опеки г. Томск',
            'Портал Госуслуги.ру'
        ]

        REPLACEMENT_SERVICES = [
            'по оформлению личных документов гражданина',
            'по оформлению Субсидии, льготы, компенсации, пенсии',
            'по предоставлению сведений из ЕГРН',
            'Приобщение, приостановка, прекращение',
            'Справки УМВД, Пенсионного фонда и налоговой',
            'Получение разрешений органов опеки города Томска',
            'По регистрации на портале Госуслуг или в личном кабинете налогоплательщика'
        ]

        try:
            phone_dummy = (args,)[0][0]
            phone_dummy = phone_dummy.replace(' ', '')

            fio_dummy = (args,)[0][1]

            if phone_dummy == '':
                return {
                    "code": 'no'
                }

            prms = {
            'name': fio_dummy if fio_dummy != 'None' else '%',
            'phone': phone_dummy
            }
            talons = requests.get(server + "/rest/booking",
                                params=prms, timeout=(5, 8)).json()

            if talons['data'] != []:

                location_name = ''
                location_address = ''
                service_name = ''
                time = ''
                talon_id = ''
                esiaid = ''
                code = ''
                for i in range(len(talons['data'])):
                    location_name += talons['data'][i]['location']['name'] + ',  '
                    location_address += talons['data'][i]['location']['address'] + ',  '
                    service_name += talons['data'][i]['service']['name'] + ',  '
                    time += talons['data'][i]['time'] + ', '
                    talon_id += talons['data'][i]['id'] + ', '
                    esiaid += talons['data'][i]['customer'].get('esiaId', '') + ', '
                    code += talons['data'][i]['code'] + ', '

                # Массив
                location_name = location_name.rsplit(',  ')[:-1]
                location_address = location_address.rsplit(',  ')[:-1]
                service_name = service_name.rsplit(',  ')[:-1]
                time = time.rsplit(', ')[:-1]
                talon_id = talon_id.rsplit(', ')[:-1]
                esiaid = esiaid.rsplit(', ')[:-1]
                code = code.rsplit(', ')[:-1]

                time_ = []
                times = []
                for i in range(len(time)):
                    times.append(time[i].split('T')[0])
                    time_.append(time[i])

                for i in range(len(time_)):
                    time_[i] = time_[i].rsplit('-')
                    time_cache = time_[i][2].rsplit('T')
                    time_[i] = str(time_[i][0]) + '-' + str(time_[i][1]) + '-' + str(time_cache[0])
                    time_cache = time_cache[1]
                    # time_[i] = format_date(time_[i]) + ' в ' + time_cache.replace(':', ' часов ') + ' минут'
                    time_[i] = time_[i] + ' в ' + time_cache

                for i in range(len(SERVICES)):
                    for k in range(len(service_name)):
                        if service_name[k] == SERVICES[i]:
                            service_name[k] = service_name[k].replace(
                                SERVICES[i], REPLACEMENT_SERVICES[i])

                service_name_time = ''
                for i in range(len(service_name)):
                    if len(talon_id) > 1 and i < len(talon_id) - 1:
                        p = '\n'
                    else:
                        p = ''
                    service_name_time += 'Ваш талон: '
                    service_name_time += 'в филиале: ' + location_name[i] + ', адрес: ' + \
                    location_address[i] + ', услуга: ' + service_name[i] + ', время визита: ' + \
                    time_[i]  + ', номер талона: ' + talons['data'][i]['code'] + p

                res = {
                    "code": 'yes',
                    'service_name_time': service_name_time,
                    'talon_id': talon_id,
                    'esiaid': esiaid,
                    'code': code,
                    'department': location_name,
                    'dates': times
                }
            else:
                res = {
                    "code": 'no'
                }
        except Exception as e:
            print('BASE_information_about_coupons', e)

            res = {
                "code": "error"
            }

        return res

    async def delete_coupons(self, talon_id, esiaid, talon, department, date, phone_dummy, fio):
        try:
            import requests

            server = "https://equeue.mfc.tomsk.ru"

            prms = {
                'id': talon_id,
                'esiaid': esiaid
            }

            response = requests.post(server + "/rest/booking/" + talon_id + "/delete/" + esiaid, params=prms, timeout=(2, 5)).json()
            res = response['success']

            if res:

                try:

                    time_new = str(datetime.datetime.now().time())[:-7]
                    time_obj = datetime.datetime.strptime(time_new, "%H:%M:%S")
                    new_time_obj = time_obj + datetime.timedelta(hours=7)
                    time_new = new_time_obj.strftime("%H:%M:%S")

                    pool = await aiomysql.create_pool(
                        host="172.18.11.103",
                        user="root",
                        password="enigma1418",
                        db="mdtomskbot",
                        autocommit=True,
                        connect_timeout=2
                    )
                    async with pool.acquire() as conn:
                        async with conn.cursor() as cursor:

                            await cursor.execute(
                                f"INSERT INTO forms (fio, tel, talon, department, date, time, platform) VALUES ('{fio}', '{phone_dummy}', '{talon}', '{department}', '{date}', '{time_new}', 'VK');"
                            )

                            # """ПОД ВОПРОСОМ"""
                            # await cursor.execute(
                            #     f"DELETE FROM vkontakte_reg WHERE sender = '{self.user_id}' AND date = '{date}' AND talon = '{talon}' AND department = '{department}';"
                            # )

                            await cursor.execute(
                                "DELETE FROM vkontakte_reg WHERE sender = %s AND date = %s AND talon = %s AND department = %s",
                                (self.user_id, date, talon, department)
)
                            # await cursor.execute(
                            #     f"SELECT * FROM notification;"
                            # )
                            # result = await cursor.fetchall()

                            # for x in result:
                            #     id_vk = x[1]
                            #     id_tb = x[2]
                            #     if str(self.user_id) == id_vk:
                            #         await cursor.execute(
                            #             f"DELETE FROM telegram_reg WHERE ani = '{id_tb}' AND date = '{date}' AND talon = '{talon}' AND department = '{department}';"
                            #         )

                            await cursor.execute(
                                """
                                DELETE FROM telegram_reg
                                WHERE ani IN (SELECT id_tb FROM notification WHERE id_vk = %s)
                                AND date = %s
                                AND talon = %s
                                AND department = %s;
                                """, (self.user_id, date, talon, department)
                            )

                except Exception as e:
                    print('BASE_deep_delete_coupons:', e)

        except Exception as e:
            print('BASE_delete_coupons', e)

        return res

    async def select_vkontakte_reg(self):

        try:

            now = datetime.datetime.now()
            date_now = now + datetime.timedelta(hours=24)
            date_formatted = date_now.strftime('%Y-%m-%d')

            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"SELECT * FROM vkontakte_reg WHERE sender = '{self.user_id}' AND date = '{str(date_formatted)}' AND now = 'yes'"
                    )
                    result = await cursor.fetchall()

        except Exception as e:
            print('BASE_select_vkontakte_reg:', e)

        return result

    async def delete_vkontakte_reg(self, talon, department):

        try:

            now = datetime.datetime.now()
            date_now = now + datetime.timedelta(hours=24)
            date_formatted = date_now.strftime('%Y-%m-%d')

            pool = await aiomysql.create_pool(
                host="172.18.11.103",
                user="root",
                password="enigma1418",
                db="mdtomskbot",
                autocommit=True,
                connect_timeout=2
            )
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:

                    await cursor.execute(
                        f"DELETE FROM vkontakte_reg WHERE sender = '{str(self.user_id)}' AND date = '{str(date_formatted)}' AND talon = '{talon}' AND department = '{department}';"
                    )

        except Exception as e:
            print('BASE_delete_vkontakte_reg:', e)